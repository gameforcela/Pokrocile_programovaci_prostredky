@if (Item == null) return;
@if (Item != null && !Item.IsInEditMode)
{
    <tr class="@(Item.NeedsRevision?"bg-red-300":"")">
        <td>@Item.Name </td>
        <td>@Item.BoughtDateTime.ToString("yyyy-MM-dd") </td>
        <td>@Item.LastRevision.ToString("yyyy-MM-dd") </td>
        <td>@(Item.NeedsRevision?"Ano":"Ne") </td>
        <td>@Item.PriceCzk</td>

        <td class="flex gap-1">
            <button @onclick="() => DeleteItemCallback.InvokeAsync()" class="bg-red-400 twbtn">X</button>
            <button @onclick="() => Item.LastRevision = DateTime.Now" class="bg-blue-400 twbtn">Provést revizi</button>
            <button @onclick="() => TurnOnEdit()" class="twbtn bg-amber-300">✏️</button>
        </td>
    </tr>
}
else if (editingItem != null && editingItem.IsInEditMode)
{
    <tr class="px-2 py-1 border-2 border-slate-600">
        <td colspan="5">
            <EditForm Model=editingItem OnValidSubmit="() => TurnOffEdit(true)">
                <DataAnnotationsValidator />
                
                <table>
                    <tbody>
                        <tr>
                            <td><InputText class="border-2 border-slate-300" @bind-Value=@editingItem.Name /> <ValidationMessage For=" () => editingItem.Name"></ValidationMessage></td>

                            <td><input class="border-2 border-slate-300" type="date" @bind-value=Item.BoughtDateTime /> </td>
                            <td><input class="border-2 border-slate-300" type="date" @bind-value=Item.LastRevision /> </td>
                            <td>@(Item.NeedsRevision?"Ano":"Ne") </td>

                            <td><InputNumber class="border-2 border-slate-300" @bind-Value=@editingItem.PriceCzk /><ValidationMessage For=" () => editingItem.PriceCzk"></ValidationMessage></td> 

                            <td class="flex gap-1">

                                @if (ChildContent == null)
                                {
                                    <button type="submit" class="twbtn bg-green-500">Ok</button>
                                    <button type="button" class="twbtn bg-green-500"  @onclick="() => TurnOffEdit(false)">Zrušit</button>
                                }
                                else
                                {
                                    @ChildContent
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
        </td>
    </tr>

}

@code {

    [Parameter] public EventCallback DeleteItemCallback { get; set; }
    [Parameter] public EventCallback<bool> EditDoneCallback { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    VybaveniModel? editingItem;


    VybaveniModel? _Item;
    [Parameter]
    public VybaveniModel? Item
    {
        get => _Item;
        set
        {
            _Item = value;
            if (value != null && value.IsInEditMode)
                TurnOnEdit();
        }
    }


    private void TurnOnEdit()
    {
        if (Item != null)
        {
            Item.IsInEditMode = true;
            editingItem = Item.Copy();
        }
    }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            editingItem?.MapTo(Item);
        }
        if (Item is not null)
            Item.IsInEditMode = false;
        editingItem = null;
        EditDoneCallback.InvokeAsync(success);
    }

    


}