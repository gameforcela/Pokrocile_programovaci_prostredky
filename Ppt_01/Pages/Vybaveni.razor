@page "/vybaveni"
@page "/co"
@inject HttpClient Http

@if (!isInNewMode)
{
    <button @onclick="@(() => {isInNewMode = true; newEntity = new(){IsInEditMode = true, Name="novota", BoughtDateTime = DateTime.Now, LastRevision = DateTime.Now }; })" class="twbtn bg-blue-500 my-2">
        Přidej nový záznam
    </button>
}

@if (seznamVybaveni == null)
{
    <Loading></Loading>
    return;
}
<table class="w-full">

    <thead class="border-b-2 border-slate-500">
        <tr>
            <th>Název</th>
            <th>Datum nákupu</th>
            <th>Datum poslední revize</th>
            <th>Potřebuje revizi?</th>
        </tr>
    </thead>

    @if (isInNewMode && newEntity != null)
    {
        <VybaveniRow EditDoneCallback="async (success) => { if(success) await PostVybaveni(newEntity); isInNewMode = false; }" Item=newEntity>
            <button type="button" class="twbtn bg-neutral-300" @onclick="() => {isInNewMode = false;}">Zruš</button>
            <button type="submit" class="twbtn bg-emerald-500">Přidej</button>
        </VybaveniRow>

    }


    @foreach (var item in seznamVybaveni)
    {
        <VybaveniRow Item=item DeleteItemCallback="() => DeleteVybaveni(item)" EditDoneCallback="async (success) => { if(success) await PutVybaveni(item); }" NewRevisionDone="async (successNewRevision) => {if(successNewRevision) await PostRevize(item);}" />
    }
</table>


@code {
    bool isInNewMode;
    VybaveniModel? newEntity;
    List<VybaveniModel>? seznamVybaveni;

    protected override async Task OnInitializedAsync()
    {
        seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniModel>?>("/vybaveni");
    }

    public async Task DeleteVybaveni(VybaveniModel itemDelete)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"/vybaveni/{itemDelete.Id}");

        if (response.IsSuccessStatusCode) seznamVybaveni?.Remove(itemDelete);


    }

    public async Task PostVybaveni(VybaveniModel newEntityPost)
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync("/vybaveni", newEntityPost);
        if(response.IsSuccessStatusCode) seznamVybaveni?.Insert(0, newEntityPost);
    }

    public async Task PutVybaveni(VybaveniModel newEntityPut)
    {        
        HttpResponseMessage response = await Http.PutAsJsonAsync("/vybaveni", newEntityPut);        

    }

    public async Task PostRevize(VybaveniModel newEntityPost)
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync("/revize", newEntityPost);

        var zaznam = seznamVybaveni.SingleOrDefault(x => x.Id == newEntityPost.Id);
        if (response.IsSuccessStatusCode) zaznam.LastRevision = newEntityPost.LastRevision;
    }

} 